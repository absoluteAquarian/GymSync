@inject ApplicationDbContext DbContext;
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@page "/trainer-appointment-list/{trainer_id:int}";

@using GymSync_Interface_v2.Components;
@using GymSync_Interface_v2.Data;
@using GymSync_Interface_v2.Models;
@using GymSync_Interface_v2.Views;
@using Microsoft.EntityFrameworkCore;


<link href="Style.css" rel="stylesheet" />


<PageTitle>GymSync - Trainer Appointment List</PageTitle>

<AuthorizeView Roles="admin">
	<div class="alert alert-danger" role="alert">
		Your are in Administrator mode!
	</div>
</AuthorizeView>

<h1>Trainer Appointment List</h1>
<br />
This page is for listing all of an individual trainer's upcoming appointments'
<br />
<br />

<AuthorizeView Roles="admin">

	<body>
		<p></p>

		@if (!_ready)
		{
			<p><br /><br /><em>Loading...</em><br /><br /></p>
		}
		else
		{
			@if (@_currentUser != null)
			{
				<p class="trainer"> @_currentUser.FirstName @_currentUser.LastName <br /></p>
				<table class="schedule-table">
					<thead>
						<tr>
							<th>Appt Id</th>
							<th>Start Time</th>
							<th>End Time</th>
						</tr>
					</thead>
					<tbody>
						@if (_appointmentList.Any())
						{
							@foreach (var appt in _appointmentList)
							{
								@if ((appt.start_time - DateTime.Now).TotalDays < 2)
								{
									<tr class="near-appt">
										<td>@appt.appointment_id</td>
										<td>@appt.start_time</td>
										<td>@appt.end_time</td>
									</tr>
								}
								else
								{
									<tr>
										<td>@appt.appointment_id</td>
										<td>@appt.start_time</td>
										<td>@appt.end_time</td>
									</tr>
								}
							}
						}
					</tbody>
				</table>
			}
			else
			{
				<div style="width: 33%" class="alert alert-danger" role="alert">
					Trainer does not exist!
				</div>
			}
		}
	</body>

</AuthorizeView>

@code {
	private Query _query;
	private bool _ready;

	[Parameter]
	public int trainer_id { get; set; }

	private UserView _currentUser = new UserView(0, "first", "last");
	private List<AppointmentEntity> _appointmentList = new List<AppointmentEntity>();

	protected override async Task OnInitializedAsync()
	{
		// Get the authentication states:
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

		// Get the authentication state of current user:
		var userState = authState.User;

		// If the user is not an admin, redirect to the home page:
		if (userState.IsInRole("admin"))
		{
			_ready = false;

			Query _query = new Query(DbContext);

			_currentUser = await _query.TrainerToUser(trainer_id);

			foreach (var appt in await _query.TrainerToAppointmentAll(trainer_id))
			{
				_appointmentList.Add(appt);
			}

			_appointmentList = _appointmentList.OrderBy(appt => appt.start_time).ToList();


			_ready = true;
		}
		else
		{
			NavigationManager.NavigateTo("/");
		}
	}
}
