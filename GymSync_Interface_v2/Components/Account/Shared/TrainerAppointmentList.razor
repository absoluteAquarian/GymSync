@inject ApplicationDbContext DbContext;
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@page "/trainer-appointment-list/{trainer_id:int}";

@using GymSync_Interface_v2.Components;
@using GymSync_Interface_v2.Data;
@using GymSync_Interface_v2.Models;
@using GymSync_Interface_v2.Views;
@using Microsoft.EntityFrameworkCore;


<PageTitle>GymSync - Trainer Appointment List</PageTitle>

<style type="text/css">
	body {
		background: #000000;
	}

	.background {
		background-image: url('https://decyple.com/gs-home-v2.jpg');
		background-size: 100%;
		height: 100vh;
		color: white;
	}

	.top-row {
		justify-content: flex-end;
		display: flex;
		align-items: center;
	}

	.container {
		width: 100vw;
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 10px;
	}

	.left {
		flex: 1;
	}

	.right {
		display: flex;
		gap: 10px;
	}

	* {
		box-sizing: border-box;
		color: whitesmoke;
	}

	.card {
		color: #5be1e6;
		background: #000000;
		border: 2px solid #5be1e6;
		border-radius: 1rem;
	}

	.card-body {
		color: whitesmoke;
	}

	.table {
		color: whitesmoke;
	}

	h1 {
		color: whitesmoke;
	}

    /* General table styling */
    .schedule-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        font-family: Arial, sans-serif;
        color: #fff; /* White text for contrast on black background */
    }

    /* Header row styling */
    .schedule-table thead {
        background-color: #000; /* Black background for header */
        color: #5be1e6; /* Use the provided #5be1e6 for header text */
    }

    .schedule-table th {
        padding: 12px 15px;
        text-align: left;
    }

    /* Data row styling */
    .schedule-table td {
        padding: 12px 15px;
        border: 1px solid #444; /* Slightly lighter border for better contrast */
        text-align: left;
    }

    /* Zebra striping for alternating rows */
    .schedule-table tr:nth-child(even) {
        background-color: #1a1a1a; /* Dark gray background for even rows */
    }

    /* Highlighting near appointments */
    .schedule-table .near-appt {
        background-color: #5be1e6; /* Light blue background for near appointments */
        color: black; /* Make text black for better visibility on light blue */
        font-weight: bold;
    }

    /* Table hover effect */
    .schedule-table tr:hover {
        background-color: #333; /* Darker hover effect */
    }

    /* Responsive adjustments */
    @@media screen and (max-width: 768px) {
        .schedule-table th, .schedule-table td {
            padding: 10px;
            font-size: 14px;
        }
    }

	.trainer {
		font-size: 48px;
		padding: 20px;
	}
</style>

<AuthorizeView Roles="admin">
	<div class="alert alert-danger" role="alert">
		Your are in Administrator mode!
	</div>
</AuthorizeView>

<h1>Trainer Appointment List</h1>
<br />
This page is for listing all of an individual trainer's upcoming appointments'
<br />
<br />

<AuthorizeView Roles="admin">

	<body>
		<p></p>

		@if (!_ready)
		{
			<p><br /><br /><em>Loading...</em><br /><br /></p>
		}
		else
		{
			@if (@_currentUser != null)
			{
				<p class="trainer"> @_currentUser.FirstName @_currentUser.LastName <br /></p>
				<table class="schedule-table">
					<thead>
						<tr>
							<th>Appt Id</th>
							<th>Start Time</th>
							<th>End Time</th>
						</tr>
					</thead>
					<tbody>
						@if (_appointmentList.Any())
						{
							@foreach (var appt in _appointmentList)
							{
								@if ((appt.start_time - DateTime.Now).TotalDays < 2)
								{
									<tr class="near-appt">
										<td>@appt.appointment_id</td>
										<td>@appt.start_time</td>
										<td>@appt.end_time</td>
									</tr>
								}
								else
								{
									<tr>
										<td>@appt.appointment_id</td>
										<td>@appt.start_time</td>
										<td>@appt.end_time</td>
									</tr>
								}
							}
						}
					</tbody>
				</table>
			}
			else
			{
				<div style="width: 33%" class="alert alert-danger" role="alert">
					Trainer does not exist!
				</div>
			}
		}
	</body>

</AuthorizeView>

@code {
	private Query _query;
	private bool _ready;

	[Parameter]
	public int trainer_id { get; set; }

	private UserView _currentUser = new UserView(0, "first", "last");
	private List<AppointmentEntity> _appointmentList = new List<AppointmentEntity>();

	protected override async Task OnInitializedAsync()
	{
		// Get the authentication states:
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

		// Get the authentication state of current user:
		var userState = authState.User;

		// If the user is not an admin, redirect to the home page:
		if (userState.IsInRole("admin"))
		{
			_ready = false;

			Query _query = new Query(DbContext);

			_currentUser = await _query.TrainerToUser(trainer_id);

			foreach (var appt in await _query.TrainerToAppointmentAll(trainer_id))
			{
				_appointmentList.Add(appt);
			}

			_appointmentList = _appointmentList.OrderBy(appt => appt.start_time).ToList();


			_ready = true;
		}
		else
		{
			NavigationManager.NavigateTo("/");
		}
	}
}
