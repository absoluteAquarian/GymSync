@page "/Account/Login"


@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using GymSync_Interface_v2.Data
@using GymSync_Interface_v2.Components.Layout


@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

@layout MainLayout

<PageTitle>Log in</PageTitle>


<style type="text/css">
    body {
        background: #000000;
    }

    .background {
        background-image: url('https://decyple.com/gs-home-v2.jpg');
        background-size: 100%;
        height: 100vh;
        color: white;
    }

    .top-row {
        justify-content: flex-end;
        display: flex;
        align-items: center;
    }

    .container {
        width: 100vw;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
    }

    .left {
        flex: 1;
    }

    .right {
        display: flex;
        gap: 10px;
    }

    * {
        box-sizing: border-box;
    }

    .menuButton {
        font-size: 25px;
        padding: 5px 10px;
        border: 1px solid #000;
        cursor: pointer;
    }

    body 
    {
        background: #000000;
    }

    .card {
        color: #5be1e6;
        background: #000000;
        border: 2px solid #5be1e6;
        border-radius: 1rem;
    }

    h2 
    {
        color: #ffffff;
    }

    h5 
    {
        color: #ffffff;
    }

    .input 
    {
        width: 100%;
        padding: 12px 20px;
        margin: 8px 0;
        box-sizing: border-box;
        border: 2px solid #5be1e6;
        border-radius: 36px;
        background-color: #000000;
        color: #5be1e6;
    }
</style>


@* <style type="text/css">
    body {
        background: #000000;
    }

    .button {
        display: flex;
        overflow: hidden;
        margin: 0px 0px 25px 0px;
        padding: 12px 12px;
        cursor: pointer;
        user-select: none;
        transition: all 150ms linear;
        text-align: center;
        white-space: nowrap;
        text-decoration: none !important;
        text-transform: none;
        text-transform: capitalize;
        color: #fff;
        border: 2px solid #5be1e6;
        border-radius: 36px;
        font-size: 13px;
        font-weight: 500;
        line-height: 1.3;
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        justify-content: center;
        align-items: center;
        flex: 0 0 160px;
        /* box-shadow: 2px 5px 10px #e4e4e4; */
        width: 100%;
        &:hover

    {
        transition: all 150ms linear;
        opacity: .85;
    }

    &:active {
        transition: all 150ms linear;
        opacity: .75;
    }

    &:focus {
        outline: 1px dotted #959595;
        outline-offset: -4px;
    }

    }

    .button.-dark {
        color: #000000;
        background: #5be1e6;
        &:focus

    {
        outline: 1px dotted white;
        outline-offset: -4px;
    }

    }

    .card {
        color: #5be1e6;
        background: #000000;
        border: 2px solid #5be1e6;
        border-radius: 1rem;
    }

    h2 {
        color: #ffffff;
    }

    h5 {
        color: #ffffff;
    }

    .input {
        width: 100%;
        padding: 12px 20px;
        margin: 8px 0;
        box-sizing: border-box;
        border: 2px solid #5be1e6;
        border-radius: 36px;
        background-color: #000000;
        color: #5be1e6;
    }
</style> *@



<div class="sidebar" hidden="@hideNavMenu">
    <NavMenu />
</div>



<section class="vh-100">



    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col col-xl-10">
                <div class="card">
                    <div class="row g-0">
                        <div class="col-md-6 col-lg-5 d-none d-md-block">
                            <img src="https://decyple.com/gs-login-i1a.jpg"
                                 alt="login form" class="img-fluid" style="border-radius: 1rem 0 0 1rem;" />
                        </div>
                        <div class="col-md-6 col-lg-7 d-flex align-items-center">
                            <div class="card-body p-4 p-lg-5 text-black">

                                <div class="d-flex align-items-center mb-3 pb-1" style="color: #ffffff;">
                                    <i class="fas fa-cubes fa-2x me-3" style="color: #ff6219;"></i>
                                    <img src="https://decyple.com/gs-logo-login.jpg"
                                         alt="GymSync Logo" class="img-fluid" style="border-radius: 1rem 0 0 1rem;" />
                                </div>


                                <StatusMessage Message="@errorMessage" />
                                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                                    <DataAnnotationsValidator />
                                    <h5 style="padding: 10px 0px 0px 10px;">Sign into your account</h5>
                                    <hr />
                                    <ValidationSummary class="text-danger" role="alert" />
                                    <div class="form-floating mb-3">
                                        <InputText @bind-Value="Input.Email" class="form-control input" autocomplete="username" aria-required="true" placeholder="name@example.com" />                                       <label for="email" class="form-label">Email</label>
                                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                                    </div>
                                    <div class="form-floating mb-3">
                                        <InputText type="password" @bind-Value="Input.Password" class="form-control  input" autocomplete="current-password" aria-required="true" placeholder="password" />
                                        <label for="password" class="form-label">Password</label>
                                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                                    </div>
                                    <div class="checkbox mb-3">
                                        <label class="form-label" style="color: #ffffff;">
                                            <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                                            Remember me
                                        </label>
                                    </div>
                                    <div>
                                        <button type="submit" class="button -dark" aria-label="Log in">Log in</button>
                                    </div>
                                    <div>
                                        <p>
                                            <a href="Account/ForgotPassword">Forgot your password?</a>
                                        </p>
                                        <p>
                                            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                                        </p>
                                        <p>
                                            <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                                        </p>
                                    </div>
                                </EditForm>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>



@code {
    private string? errorMessage;
    private bool hideNavMenu { get; set; } = true;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

    public void OpenNavMenu()
    {
        if (hideNavMenu)
            hideNavMenu = false;
        else
            hideNavMenu = true;
    }
}
