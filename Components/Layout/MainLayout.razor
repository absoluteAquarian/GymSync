@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<link href="Style.css" rel="stylesheet" />

<style>
    .sidebar{
    background-image: linear-gradient(180deg, rgb(0, 0, 0) 65%, #5be1e6 90%) !important;
    }
</style>


<div class="page">
    <div class="sidebar" hidden="@hideNavMenu">
        <NavMenu />
    </div>

    <main>
        <div class="px-4 container" style="background: #000000;">

            <div class="pt-1 left">
                <button data-mdb-button-init data-mdb-ripple-init class="btn-dark btn-lg btn-block menuButton" @onclick="OpenNavMenu">☰</button>
            </div>

            @if(!isAuthorized)
            {
                <div class="nav-item px-3 right">
                    <form action="Account/Login">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="button -dark">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Login
                        </button>
                    </form>
                </div>
            }
            else
            {
                <div class="nav-item px-3 right">
                    <form action="/Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="/Account/Login" />
                        <button type="submit" class="button -dark">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            }
                        
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>


@code {
    private string? currentUrl;
    private bool hideNavMenu { get; set; } = true;
    bool isAuthorized { get; set; } = false;

    //protected override void OnInitialized()
    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthorized = user.Identity?.IsAuthenticated ?? false;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    public void OpenNavMenu()
    {
        if (hideNavMenu)
            hideNavMenu = false;
        else
            hideNavMenu = true;
    }

    
}