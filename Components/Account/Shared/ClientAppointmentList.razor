@inject ApplicationDbContext _dbContext;

@page "/client-appointment-list/{_client_id:int}";
@using GymSync.Components;
@using GymSync.Data;
@using GymSync.Models;
@using GymSync.Views;
@using Microsoft.EntityFrameworkCore;


<body>
	<h3>Client Appointment List</h3>

	<p>This page is for displaying all of a client's appointments</p>

	@if (!_ready)
	{
		<p>Loading.....</p>
	}
	else
	{
		<p>Upcoming Appointments for: <b>@_currentUser.FirstName.ToUpper() @_currentUser.LastName.ToUpper()</b></p>

		<table class="schedule-table">
			<thead>
				<tr>
					<th>Appt Id</th>
					<th> Start Day/Time</th>
					<th>End Day/Time</th>
				</tr>
			</thead>

			@foreach(var appt in _appointmentList)
			{
				if((appt.start_time - DateTime.Now).TotalDays < 2)
				{
					<tr class="near-appt">
						<td>@appt.appointment_id</td>
						<td>@appt.start_time</td>
						<td>@appt.end_time</td>
					</tr>
				}
				else
				{
					<tr>
						<td>@appt.appointment_id</td>
						<td>@appt.start_time</td>
						<td>@appt.end_time</td>
					</tr>					
				}

			}
		</table>
	}

</body>


@code {
	private Query _query;
	private bool _ready;

	[Parameter]
	public int _client_id { get; set; }

	private UserView _currentUser = new UserView(0, "first", "last", "email");
	private List<AppointmentEntity> _appointmentList = [];


	protected override async Task OnInitializedAsync()
	{
		_ready = false;

		_query = new Query(_dbContext);

		//Get the current user's information for referenece on page
		if (await _query.ClientToUser(_client_id) is UserView user)
			_currentUser = user;

		//get the appointment list for the user
		//This query uses the client's id to retrieve all of the appointments associated with them in the database
		//Then sort the list to put them in order from closest upcoming appointment
		_appointmentList = (await _query.ClientToAppointmentAll(_client_id)).OrderBy(appt => appt.start_time).ToList();

		_ready = true;
	}
}
