@inject ApplicationDbContext DbContext;


@page "/client/{client_id:int}";


@using GymSync.Data;
@using GymSync.Models;
@using GymSync.Views;
@using GymSync.Components;
@using Microsoft.EntityFrameworkCore;


<link href="Style.css" rel="stylesheet" />
<style>
	/* Loading Dots:                                        */
	/* Source: https://10015.io/tools/css-loader-generator  */

	.dots {
	width: 88px;
	height: 42.2px;
	background: radial-gradient(circle closest-side,#5be1e6 90%,#0000) 0% 50%, radial-gradient(circle closest-side,#5be1e6 90%,#0000) 50% 50%, radial-gradient(circle closest-side,#5be1e6 90%,#0000) 100% 50%;
	background-size: calc(100%/3) 21.1px;
	background-repeat: no-repeat;
	animation: dots-7ar3yq 1s infinite linear;
	}

	@@keyframes dots-7ar3yq {
	20% {
	background-position: 0% 0%, 50% 50%,100% 50%;
	}

	40% {
	background-position: 0% 100%, 50% 0%,100% 50%;
	}

	60% {
	background-position: 0% 50%, 50% 100%,100% 0%;
	}

	80% {
	background-position: 0% 50%, 50% 50%,100% 100%;
	}
	}
</style>


<PageTitle>GymSync - Client Page</PageTitle>
<h3>Client Details Page</h3>
<p>This page displays the cleints appointments and details</p>
<p><strong>Query execution time: @executionTime milliseconds</strong></p>


@if (!_ready)
{
	<p><br /><br /><div class="dots"></div><br /><br /></p>
}
else
{
	@if (@_currentUser != null)
	{
		<p class="client"> @_currentUser.FirstName @_currentUser.LastName <br /></p>
		<table class="schedule-table">
			<thead>
				<tr>
					<th>Appt Id</th>
					<th>Start Time</th>
					<th>End Time</th>
				</tr>
			</thead>
			<tbody>
				@if (_appointmentList.Any())
				{
					@foreach (var appt in _appointmentList)
					{
						@if ((appt.start_time - DateTime.Now).TotalDays < 2)
						{
							<tr class="near-appt">
								<td>@appt.appointment_id</td>
								<td>@appt.start_time</td>
								<td>@appt.end_time</td>
							</tr>
						}
						else
						{
							<tr>
								<td>@appt.appointment_id</td>
								<td>@appt.start_time</td>
								<td>@appt.end_time</td>
							</tr>
						}
					}
				}
			</tbody>
		</table>
	}
	else
	{
		<div style="width: 33%" class="alert alert-danger" role="alert">
			Client does not exist!
		</div>
	}
}


@code 
{
	// Set the required variables for each time the page is loaded:
	private Query _query;
	private bool _ready;
	private long executionTime;

	// This parameter receives the client ID from the parent component or route:
	[Parameter]
	public int client_id { get; set; }

	// Create a new user instance with placeholder data:
	private UserView? _currentUser = new UserView(0, "first", "last", "email");

	// This list will store the client's appointment records retrieved from the database:
	private List<AppointmentEntity> _appointmentList = new List<AppointmentEntity>();

	// :
	protected override async Task OnInitializedAsync()
	{
		// Set the ready flag to false so the UI can show a loading state if needed:
		_ready = false;

		// Create a new instance of the Query class, which handles database access:
		_query = new Query(DbContext);

		// Initialize the Stopwatch:
		System.Diagnostics.Stopwatch stopwatch = null;

		// Start the Stopwatch:
		stopwatch = System.Diagnostics.Stopwatch.StartNew();

		// Retrieve all appointments related to the given client ID and store them in the list:
		_appointmentList = await _query.ClientToAppointmentAll(client_id);

		// Retrieve the user's profile information based on the client ID:
		_currentUser = await _query.ClientToUser(client_id);

		// Stop the Stopwatch once the query is complete:
		stopwatch.Stop();

		// Get the elapsed time in milliseconds
		executionTime = stopwatch.ElapsedMilliseconds;

		// Set the ready flag to true to indicate that data loading is complete:
		_ready = true;
	}
}