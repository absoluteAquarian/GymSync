@inject ApplicationDbContext DbContext;
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserSessionService _userSession;

@page "/trainer-appointment-list/{trainer_id:int}";

@using GymSync.Components;
@using GymSync.Data;
@using GymSync.Models;
@using GymSync.Views;
@using Microsoft.EntityFrameworkCore;
@using GymSync.Services;


<link href="Style.css" rel="stylesheet" />

<style>
	/* Loading Dots:                                        */
	/* Source: https://10015.io/tools/css-loader-generator  */

	.dots {
	width: 88px;
	height: 42.2px;
	background: radial-gradient(circle closest-side,#5be1e6 90%,#0000) 0% 50%, radial-gradient(circle closest-side,#5be1e6 90%,#0000) 50% 50%, radial-gradient(circle closest-side,#5be1e6 90%,#0000) 100% 50%;
	background-size: calc(100%/3) 21.1px;
	background-repeat: no-repeat;
	animation: dots-7ar3yq 1s infinite linear;
	}

	@@keyframes dots-7ar3yq {
	20% {
	background-position: 0% 0%, 50% 50%,100% 50%;
	}

	40% {
	background-position: 0% 100%, 50% 0%,100% 50%;
	}

	60% {
	background-position: 0% 50%, 50% 100%,100% 0%;
	}

	80% {
	background-position: 0% 50%, 50% 50%,100% 100%;
	}
	}
</style>


<PageTitle>GymSync - Trainer Appointment List</PageTitle>

<AuthorizeView Roles="admin">
	<div class="alert alert-danger" role="alert">
		Your are in Administrator mode!
	</div>
</AuthorizeView>

<h1>Trainer Appointment List</h1>
<br />
This page is for listing all of an individual trainer's upcoming appointments'
<br />
<br />


<body>
	<p></p>

	@if (!_ready)
	{
		<p><br /><br /><div class="dots"></div><br /><br /></p>
	}
	else
	{
		@if (@_currentUser != null)
		{
			<p class="trainer"> @_currentUser.FirstName @_currentUser.LastName <br /></p>
			<table class="schedule-table">
				<thead>
					<tr>
						<th>Client Name</th>
						<th>Start Time</th>
						<th>End Time</th>
					</tr>
				</thead>
				<tbody>
					@if (_appointmentList.Any())
					{
						@foreach (var appt in _appointmentList)
						{
							@if ((appt.start_time - DateTime.Now).TotalDays < 2)
							{
								<tr class="near-appt">
									<td>@appt.clientName</td>
									<td>@appt.start_time</td>
									<td>@appt.end_time</td>
								</tr>
							}
							else
							{
								<tr>
									<td>@appt.clientName</td>
									<td>@appt.start_time</td>
									<td>@appt.end_time</td>
								</tr>
							}
						}
					}
				</tbody>
			</table>
		}
		else
		{
			<div style="width: 33%" class="alert alert-danger" role="alert">
				Trainer does not exist!
			</div>
		}
	}
</body>



@code {
	private Query _query;
	private bool _ready;

	[Parameter]
	public int trainer_id { get; set; }

	private UserView _currentUser = new UserView(0, "first", "last", "email");
	private List<AppointmentEntity> _trainerAppointmentList = new List<AppointmentEntity>();
	private List<AppointmentView> _appointmentList = new List<AppointmentView>();

	protected override async Task OnInitializedAsync()
	{
		// Get the authentication states:
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

		// Get the authentication state of current user:
		var userState = authState.User;

		// If the user is not an admin, redirect to the home page:
		if (_userSession.IsTrainer)
		{
			_ready = false;

			Query _query = new Query(DbContext);

			if (await _query.TrainerToUser(trainer_id) is UserView user)
				_currentUser = user;
			_trainerAppointmentList = (await _query.TrainerToAppointmentAll(trainer_id)).OrderBy(a => a.start_time).ToList();
			//get the name of the client for each appointment and set them to the appointment list
			foreach (var appt in _trainerAppointmentList)
			{
				ClientEntity client = await _query.AppointmentToClient(appt.appointment_id);
				if (client != null)
				{
					UserView clientUser = await _query.ClientToUser(client.client_id);
					if (clientUser != null)
					{
						AppointmentView appointmentView = new AppointmentView(clientUser.FirstName + " " + clientUser.LastName, appt.start_time, appt.end_time);
						_appointmentList.Add(appointmentView);
					}
					else
					{
						AppointmentView appointmentView = new AppointmentView("Client number not assigned", appt.start_time, appt.end_time);
						_appointmentList.Add(appointmentView);
					}
				}
				else
				{
					AppointmentView appointmentView = new AppointmentView("No client assigned to appointment", appt.start_time, appt.end_time);
					_appointmentList.Add(appointmentView);
				}

				
				

			}

			_ready = true;
		}
		else
		{
			NavigationManager.NavigateTo("/");
		}
	}
}
