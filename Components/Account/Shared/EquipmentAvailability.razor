@inject ApplicationDbContext DbContext;
@inject UserSessionService UserSession;

@page "/equipment-availability"

@using GymSync.Data;
@using GymSync.Models;
@using GymSync.Services;
@using GymSync.Views;
@using GymSync.Components;
@using MySqlConnector;
@using Microsoft.EntityFrameworkCore;


<link href="Style.css" rel="stylesheet" />

<style>
	/* Loading Dots:                                        */
	/* Source: https://10015.io/tools/css-loader-generator  */

	.dots {
	width: 88px;
	height: 42.2px;
	background: radial-gradient(circle closest-side,#5be1e6 90%,#0000) 0% 50%, radial-gradient(circle closest-side,#5be1e6 90%,#0000) 50% 50%, radial-gradient(circle closest-side,#5be1e6 90%,#0000) 100% 50%;
	background-size: calc(100%/3) 21.1px;
	background-repeat: no-repeat;
	animation: dots-7ar3yq 1s infinite linear;
	}

	@@keyframes dots-7ar3yq {
	20% {
	background-position: 0% 0%, 50% 50%,100% 50%;
	}

	40% {
	background-position: 0% 100%, 50% 0%,100% 50%;
	}

	60% {
	background-position: 0% 50%, 50% 100%,100% 0%;
	}

	80% {
	background-position: 0% 50%, 50% 50%,100% 100%;
	}
	}
</style>

<PageTitle>GymSync Equipment Availability</PageTitle>
<h1>Equipment Availability</h1>
This page has a list of all gym equipment and its current availability.


@if (!_ready)
{
	<p><br /><br /><div class="dots"></div><br /><br /></p>
}
else
{
	<table class="equipment-table">

		<thead>
			<tr>
				<th>Equipment Id</th>
				<th>Equipment Name</th>
				<th>Location</th>				
				<th>In Use</th>
				<th>Mark Status</th>
				
				@if (UserSession.IsStaff)
				{
					<th>Last Maintenance</th>
					<th>Mx Complete</th>
				}

			</tr>
		</thead>

		<tbody>
			@foreach (var gymEquipment in _gymEquipmentList)
			{
				<tr>
					<td>@gymEquipment.EquipmentID</td>
					<td>@gymEquipment.Name</td>
					<td>@gymEquipment.Location</td>
					

					@if (gymEquipment.InUse)
					{
						<td class="td-inuse">In Use</td>
					}
					else
					{
						<td class="td-notinuse">Open</td>
					}

					<td>
						<button @onclick="()=>UpdateEquipmentUseStatus(gymEquipment.EquipmentID)">Check In/Out</button>
					</td>

					@if(UserSession.IsStaff)
					{
						@if (gymEquipment.LastMaintenance < DateTime.Now.AddHours(-24))
						{
							<td class="td-inuse">@gymEquipment.LastMaintenance</td>
						}
						else
						{
							<td class="td-notinuse">@gymEquipment.LastMaintenance</td>
						}
										
						<td>
							<button @onclick="()=>CompleteMaintenance(gymEquipment.EquipmentID)">Done</button>
						</td>
					}






				</tr>
			}
		</tbody>

	</table>
	<p>@inUseStatusMessage</p>

	@if (UserSession.IsStaff)
	{
		<p>@maintenanceMessage</p>	
	}
}

@code {
	private Query _query;
	private bool _ready;

	//message for equipment updates
	private string maintenanceMessage = "No message update";
	private string inUseStatusMessage = "No status update";

	private List<EquipmentView> _gymEquipmentList = [];

	protected override async Task OnInitializedAsync()
	{
		_ready = false;

		_query = new Query(DbContext);

		//Get all the items and their information from the Equipment and Item tables in the database
		_gymEquipmentList = await _query.GetEquipmentAll();

		_ready = true;
	}

	private async Task CompleteMaintenance(int id)
	{

		try
		{
			var idParam = new MySqlParameter("@equipmentId", id);

			await DbContext.Database.ExecuteSqlRawAsync("CALL maintenance_complete(@equipmentId)", idParam);
			maintenanceMessage = "Maintenance status updated";

			_gymEquipmentList = await _query.GetEquipmentAll();

		}
		catch(Exception ex)
		{
			maintenanceMessage = $"Failed to update: {ex.Message}";
		}


	}

	private async Task UpdateEquipmentUseStatus(int id)
	{
		try
		{
			var equipIdParam = new MySqlParameter("@equipId", id);
			await DbContext.Database.ExecuteSqlRawAsync("CALL update_equipment_use_status(@equipId)", equipIdParam);
			inUseStatusMessage = "Equipment status updated";

			_gymEquipmentList = await _query.GetEquipmentAll();

		}
		catch (Exception ex)
		{
			inUseStatusMessage = $"Failed to update status: {ex.Message}";
		}
	}

}