@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using GymSync.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager


<PageTitle>Profile</PageTitle>


<style>
    /* Loading Dots:                                        */
    /* Source: https://10015.io/tools/css-loader-generator  */

    .dots {
        width: 88px;
        height: 42.2px;
        background: radial-gradient(circle closest-side,#5be1e6 90%,#0000) 0% 50%, radial-gradient(circle closest-side,#5be1e6 90%,#0000) 50% 50%, radial-gradient(circle closest-side,#5be1e6 90%,#0000) 100% 50%;
        background-size: calc(100%/3) 21.1px;
        background-repeat: no-repeat;
        animation: dots-7ar3yq 1s infinite linear;
    }

    @@keyframes dots-7ar3yq {
        20% {
            background-position: 0% 0%, 50% 50%,100% 50%;
        }

        40% {
            background-position: 0% 100%, 50% 0%,100% 50%;
        }

        60% {
            background-position: 0% 50%, 50% 100%,100% 0%;
        }

        80% {
            background-position: 0% 50%, 50% 50%,100% 100%;
        }
    }
</style>


@if (HttpContext is null)
{
    <p><br /><br /><div class="dots"></div><br /><br /></p>
}
else
{
    <h3>Profile</h3>
    <StatusMessage />

    <div class="row">
        <div class="col-md-6">
            <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                    <label for="username" class="form-label">Username</label>
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                    <label for="phone-number" class="form-label">Phone number</label>
                    <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}


@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    // protected override async Task OnInitializedAsync()
    // {
    //     user = await UserAccessor.GetRequiredUserAsync(HttpContext);
    //     username = await UserManager.GetUserNameAsync(user);
    //     phoneNumber = await UserManager.GetPhoneNumberAsync(user);

    //     Input.PhoneNumber ??= phoneNumber;
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}
