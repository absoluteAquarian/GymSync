@inject ApplicationDbContext _dbContext;
@inject UserSessionService _UserSession;
@inject NavigationManager _Navigation;
@inject AuthenticationStateProvider AuthenticationStateProvider

@page "/dashboard/{user_id:int}"
@page "/dashboard"
@using GymSync.Data
@using GymSync.Models
@using GymSync.Views;
@using GymSync.Components;
@using GymSync.Services;
@using Microsoft.EntityFrameworkCore;

<PageTitle>GymSync Dashboard Rerouter</PageTitle>

@if (!_ready)
{
	<p>Awaiting server...</p>
}
else
{

	<p>Something went wrong, you should have been redirected</p>

}



@code {
	[Parameter]
	public int user_id { get; set; }

	Query _query;
	private bool _ready;

	//variables for determining the view
	//userID will be used to lookup the other ID's and determine if the user belongs to those classes
	private int _userID;
	private int _trainerID;
	private int _staffID;
	private int _clientID;

	private bool _isUser = true;
	private bool _isTrainer = true;
	private bool _isStaff = true;
	private bool _isClient = true;


	private List<AppointmentEntity> _clientAppointmentList = [];
	//variables for user information
	private string _userName = "Unknown User";

	protected override async Task OnInitializedAsync()
	{
		_query = new Query(_dbContext);

		_ready = false;
		if (_UserSession.UserID != null)
		{
			_userID = (int)_UserSession.UserID;
		}
		else
		{
			// Get the current authentication state (contains the current user identity and claims):
			var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

			// Extract the ClaimsPrincipal representing the current user:
			var user = authenticationState.User;

			// Check if the user is authenticated:
			if (user.Identity != null && !string.IsNullOrWhiteSpace(user.Identity.Name) && user.Identity.IsAuthenticated)
			{
				// Use the authenticated user's email (user.Identity.Name) to fetch the corresponding UserView:
				UserView? userUV = await _query.AspNetUserToUser(user.Identity.Name);

				// Extract and store the UserID from the returned UserView object:
				if (userUV != null)
					_userID = userUV.UserID;
			}
		}

		var roles = await _query.GetUserRolesForUser(_userID);
		if (roles is not null)
		{
			// Information for the user exists
			_userName = roles.User.FirstName.ToUpper() + " " + roles.User.LastName.ToUpper();
			_isUser = true;

			//check if user is has a trainer role assigned
			if (roles.Trainer is not null) {
				_UserSession.TrainerID = roles.Trainer.trainer_id;
				_UserSession.IsTrainer = true;
			} else {
				_UserSession.TrainerID = 0;
				_UserSession.IsTrainer = false;
			}

			//check if user has a staff role assigned
			if (roles.Staff is not null) {
				_UserSession.StaffID = roles.Staff.staff_id;
				_UserSession.IsStaff = true;
			} else {
				_UserSession.StaffID = 0;
				_UserSession.IsStaff = false;
			}

			//check if user has a client role assigned
			if (roles.Client is not null) {
				_UserSession.ClientID = roles.Client.client_id;
				_UserSession.IsClient = true;
			} else {
				_UserSession.ClientID = 0;
				_UserSession.IsClient = false;
			}
		} else {
			//user does not exist set all values to defaults for an unknown user
			_userName = "Unknown User";
			_isUser = false;
			_trainerID = 0;
			_isTrainer = false;
			_staffID = 0;
			_isStaff = false;
			_clientID = 0;
			_isClient = false;
		}

		//determine which home page the user should be sent to
		//priorites are 1. trainer 2. staff 3. client 4. unknown user 5. non-user
		if (_UserSession.IsTrainer)
		{
			_Navigation.NavigateTo($"/trainer-appointment-list/{_UserSession.TrainerID}");
		}
		else if (_UserSession.IsStaff)
		{
			_Navigation.NavigateTo($"/admin-dashboard");
		}
		else if (_UserSession.IsClient)
		{
			_Navigation.NavigateTo($"/client/{_UserSession.ClientID}");
		}
		else if (_UserSession.IsUser)
		{
			_Navigation.NavigateTo($"/unassigned-user/{_UserSession.UserID}");
		}

		_ready = true;
	}
	

}
