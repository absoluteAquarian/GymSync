@using GymSync.Data
@using GymSync.Models
@using Microsoft.EntityFrameworkCore;
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@layout LoginLayout
@page "/login"
@rendermode InteractiveServer

@* @using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider *@

<PageTitle>Login</PageTitle>

<section class="vh-100" style="background-color: #fefefe;">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col col-xl-10">
                <div class="card" style="border-radius: 1rem;">
                    <div class="row g-0">
                        <div class="col-md-6 col-lg-5 d-none d-md-block">
                            <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-login-form/img1.webp"
                            alt="login form" class="img-fluid" style="border-radius: 1rem 0 0 1rem;" />
                        </div>
                        <div class="col-md-6 col-lg-7 d-flex align-items-center">
                            <div class="card-body p-4 p-lg-5 text-black">

                                <div class="d-flex align-items-center mb-3 pb-1">
                                    <i class="fas fa-cubes fa-2x me-3" style="color: #ff6219;"></i>
                                    <span class="h1 fw-bold mb-0">Logo</span>
                                </div>

                                <h5 class="fw-normal mb-3 pb-3" style="letter-spacing: 1px;">Sign into your account</h5>

                                <div data-mdb-input-init class="form-outline mb-4">
                                    @* Input Email Address *@
                                    <InputText type="email" id="form2Example17" class="form-control form-control-lg" @bind-Value="email" placeholder="email address" />
                                </div>

                                <div data-mdb-input-init class="form-outline mb-4">
                                    @* Input Password *@
                                    <InputText type="password" id="form2Example27" class="form-control form-control-lg" @bind-Value="password" placeholder="password" />
                                </div>

                                <div class="pt-1 mb-4">
                                    @* Login Button *@
                                    <button data-mdb-button-init data-mdb-ripple-init class="btn btn-dark btn-lg btn-block" @onclick="ValidateUser">Login</button>
                                </div>

                                <a class="small text-muted" href="/resetpassword">Reset password?</a>
                                <p class="mb-5 pb-lg-2" style="color: #393f81;">
                                    Don't have an account? <a href="/register"
                                    style="color: #393f81;">Register here</a>
                                </p>

                                <p class="small text-muted">
                                    <a href="/tos">Terms of use</a>
                                    <a href="/privacypolicy">Privacy policy</a><br />
                                </p>

                                @* Alerts for valid and invalid login *@
                                <div class="alert alert-primary" role="alert" hidden="@hideWarning">
                                    @warning
                                </div>
                                <div class="alert alert-success" role="alert" hidden="@hideSuccess">
                                    @success
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>



@code {
    private string? email;                                                  // Variable to hold the email address entered in the form
    private string? password;                                               // Variable to hold the password entered in the form
    private string warning = "Invalid username/password combination!";      // Warning message used for when a user enters the wron email/password combo
    private string success = "You are logged in!";                          // Message used for successful login
    private bool hideWarning { get; set; } = true;                          // Source: https://getbootstrap.com/docs/4.0/components/alerts/
    private bool hideSuccess { get; set; } = true;                          // Source: https://getbootstrap.com/docs/4.0/components/alerts/


    // // Version 1:
    // private void ValidateUser()
    // {   
    //     // Write to the console for debuggin purposes:
    //     System.Diagnostics.Debug.WriteLine("Email Address: " + email);
    //     System.Diagnostics.Debug.WriteLine("Password: " + password);
    //
    //     // Validate logins (primatively):
    //     if (email != "mamccorkle@ualr.edu" && password != "password")
    //     {
    //         hideWarning = !hideWarning;
    //         hideSuccess = true;
    //     }
    //     else if(email == "mamccorkle@ualr.edu" && password == "password")
    //     {
    //         hideSuccess = !hideSuccess;
    //         hideWarning = true;
    //     }
    // }



    // // Version 2:
    // private async Task<bool> ValidateUser()
    // {
    //     //var returnedUsers = await DbContext.USER.FromSql($"SELECT * FROM USER").ToListAsync();
    //     List<UserEntity> returnedUsers = await DbContext.USER.FromSql($"SELECT * FROM USER").ToListAsync();
    //
    //     if (returnedUsers.Count != 0)
    //     {
    //         // Lambda to search returned users for the specific user trying to log in. Only one entry should return:
    //         var validUserEntry = returnedUsers.Where(user => user.email == email && user.userPassword == password).ToList();
    //         if (validUserEntry.Count == 1)
    //         {
    //             // Show logged in:
    //             hideSuccess = false;
    //             hideWarning = true;
    //
    //             // Timed delay for effect:
    //             Task.Delay(5000).Wait();
    //
    //             // Authorize user:
    //             // await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(returnedUsers);
    //
    //             // Redirect approriate page:
    //             NavigationManager.NavigateTo("/");
    //
    //             // Return true indicating valid login:
    //             return await Task.FromResult(true);
    //         }
    //         else
    //         {
    //             // Show invalid login
    //             hideSuccess = true;
    //             hideWarning = false;
    //
    //             // Return false indicating invalid login:
    //             return await Task.FromResult(false);
    //         }
    //     }
    //     else
    //     {
    //         // Show invalid login
    //         hideSuccess = true;
    //         hideWarning = false;
    //
    //         // Return false indicating invalid login:
    //         return await Task.FromResult(false);
    //     }
    //
    //     // Return false indicating invalid login:
    //     return await Task.FromResult(false);
    // }



    // Version 3:
    private async Task<bool> ValidateUser()
    {
        // Check for valid information:
        if (string.IsNullOrEmpty(email) || string.IsNullOrEmpty(password))
        {
            // Show invalid login:
            hideSuccess = true;
            hideWarning = false;

            // Return false indicating invalid login:
            return await Task.FromResult(false);
        }
        else
        {
            // Get the lowercase email and attach to the SQL statement being created:
            string emailLowered = email.ToLower();
            System.FormattableString query = $"SELECT * FROM USER WHERE LOWER(email) = {emailLowered}";
            List<UserEntity> returnedUsers = await DbContext.USER.FromSql(query).ToListAsync();

            // Get the hashed password:
            string hashedPassword = GetPasswordHash(password);

            // Ensure only one returned item and verify the passwords match:
            if (returnedUsers.Count == 1 && returnedUsers[0].userPassword == hashedPassword)
            {
                // Show logged in:
                hideSuccess = false;
                hideWarning = true;

                // Timed delay for effect:
                await Task.Delay(2000);

                // Authorize user:
                //await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(returnedUsers);

                // Redirect approriate page:
                NavigationManager.NavigateTo("/");

                // Return true indicating valid login:
                return await Task.FromResult(true);
            }
            else
            {
                // Show invalid login
                hideSuccess = true;
                hideWarning = false;

                // Return false indicating invalid login:
                return await Task.FromResult(false);
            }
        }
    }

    string GetPasswordHash(string password)
    {
        var inputPasswordAsBytes = System.Text.Encoding.UTF8.GetBytes(password);
        var inputPasswordAsHash = System.Security.Cryptography.SHA256.HashData(inputPasswordAsBytes);
        return Convert.ToHexString(inputPasswordAsHash);
    }
}