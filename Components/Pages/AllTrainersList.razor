@inject ApplicationDbContext DbContext

@page "/trainer-list"
@using GymSync.Data
@using GymSync.Models
@using GymSync.Views
@using Microsoft.EntityFrameworkCore;



<PageTitle>Trainer List</PageTitle>

<h1>List of Clients per Trainer</h1>

This page lists the clients for each trainer.

@if (!_ready)
{
	<p><em>Loading...</em></p>
}
else
{
	@foreach (var trainer in _trainers)
	{
		<h3>Trainer: @trainer.FirstName @trainer.LastName</h3>
		@if (_trainerUserToClients.TryGetValue(trainer.UserID, out var clients) && clients.Count > 0)
		{
			<table class="table">
				<thead>
					<tr>
						<th>Client ID</th>
						<th>Client Name</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var client in clients)
					{
						<tr>
							<td>@client.UserID</td>
							<td>@client.FirstName @client.LastName</td>
						</tr>
					}
				</tbody>
			</table>
		}
		else
		{
			<p>No clients found for this trainer.</p>
		}
	}
}

@code {
	private Query _query;
	private bool _ready;

	private List<UserView> _trainers = [];
	private Dictionary<int, List<UserView>> _trainerUserToClients = [];

	protected override async Task OnInitializedAsync() {
		_ready = false;

		_query = new Query(DbContext);

		// Get all trainers with one query rather than individual queries for each trainer
		_trainers = await _query.TrainerToUserAll();

		// Since the previous query accessed USER_x_TRAINER, accessing it again (via TrainerToUser) here shouldn't incur a database hit in theory
		// But even if it does, only one field is being accessed, so the performance impact should be minimal
		foreach (var trainer in await DbContext.TRAINER.Select(t => t.trainer_id).ToListAsync()) {
			var user = await _query.TrainerToUser(trainer);
			if (user != null)
				_trainerUserToClients[user.UserID] = await _query.GetClientsForTrainer(trainer);
		}

		_ready = true;
	}
}
